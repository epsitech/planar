/**
  * \file VecPlnrVControl.cpp
  * vector VecPlnrVControl (implementation)
  * \author Alexander Wirthmueller
  * \date created: 4 Dec 2015
  * \date modified: 4 Dec 2015
  */

#include "VecPlnrVControl.h"

/******************************************************************************
 namespace VecPlnrVControl
 ******************************************************************************/

uint VecPlnrVControl::getIx(
			const string& sref
		) {
	string s = StrMod::lc(sref);

	if (s == "pnlplnrusglist.tcosrf") return PNLPLNRUSGLIST_TCOSRF;
	else if (s == "pnlplnrusgaaccess.tcocrd") return PNLPLNRUSGAACCESS_TCOCRD;
	else if (s == "pnlplnrusgaaccess.tcouac") return PNLPLNRUSGAACCESS_TCOUAC;
	else if (s == "pnlplnrusgmnuser.tcomref") return PNLPLNRUSGMNUSER_TCOMREF;
	else if (s == "pnlplnrusgmnuser.tcoulv") return PNLPLNRUSGMNUSER_TCOULV;
	else if (s == "pnlplnrusrlist.tcoprs") return PNLPLNRUSRLIST_TCOPRS;
	else if (s == "pnlplnrusrlist.tcosrf") return PNLPLNRUSRLIST_TCOSRF;
	else if (s == "pnlplnrusrlist.tcousg") return PNLPLNRUSRLIST_TCOUSG;
	else if (s == "pnlplnrusrlist.tcoste") return PNLPLNRUSRLIST_TCOSTE;
	else if (s == "pnlplnrusrlist.tcolcl") return PNLPLNRUSRLIST_TCOLCL;
	else if (s == "pnlplnrusrlist.tcoulv") return PNLPLNRUSRLIST_TCOULV;
	else if (s == "pnlplnrusraaccess.tcocrd") return PNLPLNRUSRAACCESS_TCOCRD;
	else if (s == "pnlplnrusraaccess.tcouac") return PNLPLNRUSRAACCESS_TCOUAC;
	else if (s == "pnlplnrusr1nsession.tcoref") return PNLPLNRUSR1NSESSION_TCOREF;
	else if (s == "pnlplnrusrmnusergroup.tcomref") return PNLPLNRUSRMNUSERGROUP_TCOMREF;
	else if (s == "pnlplnrusrmnusergroup.tcoulv") return PNLPLNRUSRMNUSERGROUP_TCOULV;
	else if (s == "pnlplnrprslist.tcotit") return PNLPLNRPRSLIST_TCOTIT;
	else if (s == "pnlplnrprslist.tcofnm") return PNLPLNRPRSLIST_TCOFNM;
	else if (s == "pnlplnrprslist.tcolnm") return PNLPLNRPRSLIST_TCOLNM;
	else if (s == "pnlplnrprslist.tcogrp") return PNLPLNRPRSLIST_TCOGRP;
	else if (s == "pnlplnrprslist.tcoown") return PNLPLNRPRSLIST_TCOOWN;
	else if (s == "pnlplnrprslist.tcosex") return PNLPLNRPRSLIST_TCOSEX;
	else if (s == "pnlplnrprslist.tcotel") return PNLPLNRPRSLIST_TCOTEL;
	else if (s == "pnlplnrprslist.tcoeml") return PNLPLNRPRSLIST_TCOEML;
	else if (s == "pnlplnrprsadetail.tcotyp") return PNLPLNRPRSADETAIL_TCOTYP;
	else if (s == "pnlplnrprsadetail.tcoval") return PNLPLNRPRSADETAIL_TCOVAL;
	else if (s == "pnlplnrfillist.tcofnm") return PNLPLNRFILLIST_TCOFNM;
	else if (s == "pnlplnrfillist.tcoret") return PNLPLNRFILLIST_TCORET;
	else if (s == "pnlplnrfillist.tcoreu") return PNLPLNRFILLIST_TCOREU;
	else if (s == "pnlplnrfillist.tcocnt") return PNLPLNRFILLIST_TCOCNT;
	else if (s == "pnlplnrfillist.tcomim") return PNLPLNRFILLIST_TCOMIM;
	else if (s == "pnlplnrfillist.tcosiz") return PNLPLNRFILLIST_TCOSIZ;
	else if (s == "pnlplnrfilmncalc.tcomref") return PNLPLNRFILMNCALC_TCOMREF;
	else if (s == "pnlplnrfilmncalc.tcocli") return PNLPLNRFILMNCALC_TCOCLI;
	else if (s == "pnlplnrfilmncalc.tcoio") return PNLPLNRFILMNCALC_TCOIO;
	else if (s == "pnlplnrdtplist.tcosrf") return PNLPLNRDTPLIST_TCOSRF;
	else if (s == "pnlplnrdtplist.tcosup") return PNLPLNRDTPLIST_TCOSUP;
	else if (s == "pnlplnrdtpkparkey.tcosrf") return PNLPLNRDTPKPARKEY_TCOSRF;
	else if (s == "pnlplnrdtpkparkey.tcotit") return PNLPLNRDTPKPARKEY_TCOTIT;
	else if (s == "pnlplnrdtpkparkey.tcocmt") return PNLPLNRDTPKPARKEY_TCOCMT;
	else if (s == "pnlplnrdtpapar.tcokey") return PNLPLNRDTPAPAR_TCOKEY;
	else if (s == "pnlplnrdtpapar.tcofil") return PNLPLNRDTPAPAR_TCOFIL;
	else if (s == "pnlplnrdtpapar.tcoval") return PNLPLNRDTPAPAR_TCOVAL;
	else if (s == "pnlplnrdtpsup1ndevice.tcoref") return PNLPLNRDTPSUP1NDEVICE_TCOREF;
	else if (s == "pnlplnrdtphk1nstructure.tcoref") return PNLPLNRDTPHK1NSTRUCTURE_TCOREF;
	else if (s == "pnlplnrdtptpl1ndevice.tcoref") return PNLPLNRDTPTPL1NDEVICE_TCOREF;
	else if (s == "pnlplnrctplist.tcotit") return PNLPLNRCTPLIST_TCOTIT;
	else if (s == "pnlplnrctplist.tcodim") return PNLPLNRCTPLIST_TCODIM;
	else if (s == "pnlplnrctplist.tcosup") return PNLPLNRCTPLIST_TCOSUP;
	else if (s == "pnlplnrctpkenvkey.tcosrf") return PNLPLNRCTPKENVKEY_TCOSRF;
	else if (s == "pnlplnrctpkenvkey.tcotit") return PNLPLNRCTPKENVKEY_TCOTIT;
	else if (s == "pnlplnrctpkenvkey.tcocmt") return PNLPLNRCTPKENVKEY_TCOCMT;
	else if (s == "pnlplnrctpkparcat.tcosrf") return PNLPLNRCTPKPARCAT_TCOSRF;
	else if (s == "pnlplnrctpkparcat.tcotit") return PNLPLNRCTPKPARCAT_TCOTIT;
	else if (s == "pnlplnrctpkparcat.tcocmt") return PNLPLNRCTPKPARCAT_TCOCMT;
	else if (s == "pnlplnrctpkparprop.tcosrf") return PNLPLNRCTPKPARPROP_TCOSRF;
	else if (s == "pnlplnrctpkparprop.tcoavl") return PNLPLNRCTPKPARPROP_TCOAVL;
	else if (s == "pnlplnrctpkparprop.tcotit") return PNLPLNRCTPKPARPROP_TCOTIT;
	else if (s == "pnlplnrctpkparprop.tcocmt") return PNLPLNRCTPKPARPROP_TCOCMT;
	else if (s == "pnlplnrctpkcalcdomprp.tcofix") return PNLPLNRCTPKCALCDOMPRP_TCOFIX;
	else if (s == "pnlplnrctpkcalcdomprp.tcosrf") return PNLPLNRCTPKCALCDOMPRP_TCOSRF;
	else if (s == "pnlplnrctpkcalcdomprp.tcoavl") return PNLPLNRCTPKCALCDOMPRP_TCOAVL;
	else if (s == "pnlplnrctpkcalcdomprp.tcoimp") return PNLPLNRCTPKCALCDOMPRP_TCOIMP;
	else if (s == "pnlplnrctpkcalcdomprp.tcotit") return PNLPLNRCTPKCALCDOMPRP_TCOTIT;
	else if (s == "pnlplnrctpkcalcdomprp.tcocmt") return PNLPLNRCTPKCALCDOMPRP_TCOCMT;
	else if (s == "pnlplnrctpkcalcvar.tcofix") return PNLPLNRCTPKCALCVAR_TCOFIX;
	else if (s == "pnlplnrctpkcalcvar.tcosrf") return PNLPLNRCTPKCALCVAR_TCOSRF;
	else if (s == "pnlplnrctpkcalcvar.tcoavl") return PNLPLNRCTPKCALCVAR_TCOAVL;
	else if (s == "pnlplnrctpkcalcvar.tcoimp") return PNLPLNRCTPKCALCVAR_TCOIMP;
	else if (s == "pnlplnrctpkcalcvar.tcotit") return PNLPLNRCTPKCALCVAR_TCOTIT;
	else if (s == "pnlplnrctpkcalcvar.tcocmt") return PNLPLNRCTPKCALCVAR_TCOCMT;
	else if (s == "pnlplnrctpaenv.tcokey") return PNLPLNRCTPAENV_TCOKEY;
	else if (s == "pnlplnrctpaenv.tcoval") return PNLPLNRCTPAENV_TCOVAL;
	else if (s == "pnlplnrctpapar.tcocat") return PNLPLNRCTPAPAR_TCOCAT;
	else if (s == "pnlplnrctpapar.tcoprp") return PNLPLNRCTPAPAR_TCOPRP;
	else if (s == "pnlplnrctpapar.tcoval") return PNLPLNRCTPAPAR_TCOVAL;
	else if (s == "pnlplnrctpsup1ncalc.tcoref") return PNLPLNRCTPSUP1NCALC_TCOREF;
	else if (s == "pnlplnrctpref1nfile.tcoref") return PNLPLNRCTPREF1NFILE_TCOREF;
	else if (s == "pnlplnrctptpl1ncalc.tcoref") return PNLPLNRCTPTPL1NCALC_TCOREF;
	else if (s == "pnlplnrmatlist.tcosrf") return PNLPLNRMATLIST_TCOSRF;
	else if (s == "pnlplnrmatlist.tcotit") return PNLPLNRMATLIST_TCOTIT;
	else if (s == "pnlplnrmatlist.tcotyp") return PNLPLNRMATLIST_TCOTYP;
	else if (s == "pnlplnrmatlist.tcocal") return PNLPLNRMATLIST_TCOCAL;
	else if (s == "pnlplnrmatlist.tcosup") return PNLPLNRMATLIST_TCOSUP;
	else if (s == "pnlplnrmatapar.tcodsn") return PNLPLNRMATAPAR_TCODSN;
	else if (s == "pnlplnrmatapar.tcocat") return PNLPLNRMATAPAR_TCOCAT;
	else if (s == "pnlplnrmatapar.tcoprp") return PNLPLNRMATAPAR_TCOPRP;
	else if (s == "pnlplnrmatapar.tcofil") return PNLPLNRMATAPAR_TCOFIL;
	else if (s == "pnlplnrmatapar.tcoval") return PNLPLNRMATAPAR_TCOVAL;
	else if (s == "pnlplnrmatapar.tcocmt") return PNLPLNRMATAPAR_TCOCMT;
	else if (s == "pnlplnrmat1nlayer.tcoref") return PNLPLNRMAT1NLAYER_TCOREF;
	else if (s == "pnlplnrmatmod1nmaterial.tcoref") return PNLPLNRMATMOD1NMATERIAL_TCOREF;
	else if (s == "pnlplnrmatref1nfile.tcoref") return PNLPLNRMATREF1NFILE_TCOREF;
	else if (s == "pnlplnrprjlist.tcotit") return PNLPLNRPRJLIST_TCOTIT;
	else if (s == "pnlplnrprjlist.tcoste") return PNLPLNRPRJLIST_TCOSTE;
	else if (s == "pnlplnrprj1ncalc.tcoref") return PNLPLNRPRJ1NCALC_TCOREF;
	else if (s == "pnlplnrprj1ndesign.tcoref") return PNLPLNRPRJ1NDESIGN_TCOREF;
	else if (s == "pnlplnrprjmntapeout.tcomref") return PNLPLNRPRJMNTAPEOUT_TCOMREF;
	else if (s == "pnlplnrdsnlist.tcotit") return PNLPLNRDSNLIST_TCOTIT;
	else if (s == "pnlplnrdsnlist.tcotyp") return PNLPLNRDSNLIST_TCOTYP;
	else if (s == "pnlplnrdsnlist.tcodim") return PNLPLNRDSNLIST_TCODIM;
	else if (s == "pnlplnrdsnlist.tcoret") return PNLPLNRDSNLIST_TCORET;
	else if (s == "pnlplnrdsnlist.tcoreu") return PNLPLNRDSNLIST_TCOREU;
	else if (s == "pnlplnrdsnlist.tcoprj") return PNLPLNRDSNLIST_TCOPRJ;
	else if (s == "pnlplnrdsnlist.tcomty") return PNLPLNRDSNLIST_TCOMTY;
	else if (s == "pnlplnrdsnlist.tcomod") return PNLPLNRDSNLIST_TCOMOD;
	else if (s == "pnlplnrdsnlist.tcodrv") return PNLPLNRDSNLIST_TCODRV;
	else if (s == "pnlplnrdsnlist.tcomaj") return PNLPLNRDSNLIST_TCOMAJ;
	else if (s == "pnlplnrdsnlist.tcosub") return PNLPLNRDSNLIST_TCOSUB;
	else if (s == "pnlplnrdsnmod1ndesign.tcoref") return PNLPLNRDSNMOD1NDESIGN_TCOREF;
	else if (s == "pnlplnrdsndrv1ndesign.tcoref") return PNLPLNRDSNDRV1NDESIGN_TCOREF;
	else if (s == "pnlplnrdsndsn1ndevice.tcoref") return PNLPLNRDSNDSN1NDEVICE_TCOREF;
	else if (s == "pnlplnrdsndsn1nstack.tcoref") return PNLPLNRDSNDSN1NSTACK_TCOREF;
	else if (s == "pnlplnrdsndsn1ndomaingd.tcoref") return PNLPLNRDSNDSN1NDOMAINGD_TCOREF;
	else if (s == "pnlplnrdsndsn1ndomain.tcoref") return PNLPLNRDSNDSN1NDOMAIN_TCOREF;
	else if (s == "pnlplnrdsn1nblock.tcoref") return PNLPLNRDSN1NBLOCK_TCOREF;
	else if (s == "pnlplnrdsn1nreticle.tcoref") return PNLPLNRDSN1NRETICLE_TCOREF;
	else if (s == "pnlplnrdsnhk1nlevel.tcoref") return PNLPLNRDSNHK1NLEVEL_TCOREF;
	else if (s == "pnlplnrdsnhk1nvertex.tcoref") return PNLPLNRDSNHK1NVERTEX_TCOREF;
	else if (s == "pnlplnrdsnhk1nlineguide.tcoref") return PNLPLNRDSNHK1NLINEGUIDE_TCOREF;
	else if (s == "pnlplnrdsnhk1narcguide.tcoref") return PNLPLNRDSNHK1NARCGUIDE_TCOREF;
	else if (s == "pnlplnrdsnhk1nlayer.tcoref") return PNLPLNRDSNHK1NLAYER_TCOREF;
	else if (s == "pnlplnrdsnhk1nstructure.tcoref") return PNLPLNRDSNHK1NSTRUCTURE_TCOREF;
	else if (s == "pnlplnrdomlist.tcosrf") return PNLPLNRDOMLIST_TCOSRF;
	else if (s == "pnlplnrdomlist.tcotyp") return PNLPLNRDOMLIST_TCOTYP;
	else if (s == "pnlplnrdomlist.tcodsn") return PNLPLNRDOMLIST_TCODSN;
	else if (s == "pnlplnrdommncalc.tcomref") return PNLPLNRDOMMNCALC_TCOMREF;
	else if (s == "pnlplnrdommncalc.tcoprp") return PNLPLNRDOMMNCALC_TCOPRP;
	else if (s == "pnlplnrdgdlist.tcosrf") return PNLPLNRDGDLIST_TCOSRF;
	else if (s == "pnlplnrdgdlist.tcotyp") return PNLPLNRDGDLIST_TCOTYP;
	else if (s == "pnlplnrdgdlist.tcodsn") return PNLPLNRDGDLIST_TCODSN;
	else if (s == "pnlplnrdvclist.tcosrf") return PNLPLNRDVCLIST_TCOSRF;
	else if (s == "pnlplnrdvclist.tcodsn") return PNLPLNRDVCLIST_TCODSN;
	else if (s == "pnlplnrdvclist.tcosup") return PNLPLNRDVCLIST_TCOSUP;
	else if (s == "pnlplnrdvclist.tcotpl") return PNLPLNRDVCLIST_TCOTPL;
	else if (s == "pnlplnrdvclist.tcomty") return PNLPLNRDVCLIST_TCOMTY;
	else if (s == "pnlplnrdvclist.tcoaty") return PNLPLNRDVCLIST_TCOATY;
	else if (s == "pnlplnrdvcapar.tcodsn") return PNLPLNRDVCAPAR_TCODSN;
	else if (s == "pnlplnrdvcapar.tcokey") return PNLPLNRDVCAPAR_TCOKEY;
	else if (s == "pnlplnrdvcapar.tcofil") return PNLPLNRDVCAPAR_TCOFIL;
	else if (s == "pnlplnrdvcapar.tcoval") return PNLPLNRDVCAPAR_TCOVAL;
	else if (s == "pnlplnrdvcsup1ndevice.tcoref") return PNLPLNRDVCSUP1NDEVICE_TCOREF;
	else if (s == "pnlplnrdvchk1nstructure.tcoref") return PNLPLNRDVCHK1NSTRUCTURE_TCOREF;
	else if (s == "pnlplnrdvchk1nvertex.tcoref") return PNLPLNRDVCHK1NVERTEX_TCOREF;
	else if (s == "pnlplnrdvchk1nlineguide.tcoref") return PNLPLNRDVCHK1NLINEGUIDE_TCOREF;
	else if (s == "pnlplnrdvchk1narcguide.tcoref") return PNLPLNRDVCHK1NARCGUIDE_TCOREF;
	else if (s == "pnlplnrsrulist.tcosrf") return PNLPLNRSRULIST_TCOSRF;
	else if (s == "pnlplnrsrulist.tcohkt") return PNLPLNRSRULIST_TCOHKT;
	else if (s == "pnlplnrsrulist.tcohku") return PNLPLNRSRULIST_TCOHKU;
	else if (s == "pnlplnrsru1nblock.tcoref") return PNLPLNRSRU1NBLOCK_TCOREF;
	else if (s == "pnlplnrsrusru1nface.tcoref") return PNLPLNRSRUSRU1NFACE_TCOREF;
	else if (s == "pnlplnrsrumnlayer.tcomref") return PNLPLNRSRUMNLAYER_TCOMREF;
	else if (s == "pnlplnrsrumnstack.tcomref") return PNLPLNRSRUMNSTACK_TCOMREF;
	else if (s == "pnlplnrsrumnstack.tcofrl") return PNLPLNRSRUMNSTACK_TCOFRL;
	else if (s == "pnlplnrsrumnstack.tcotol") return PNLPLNRSRUMNSTACK_TCOTOL;
	else if (s == "pnlplnrstklist.tcosrf") return PNLPLNRSTKLIST_TCOSRF;
	else if (s == "pnlplnrstklist.tcotyp") return PNLPLNRSTKLIST_TCOTYP;
	else if (s == "pnlplnrstklist.tcodsn") return PNLPLNRSTKLIST_TCODSN;
	else if (s == "pnlplnrstklist.tcomty") return PNLPLNRSTKLIST_TCOMTY;
	else if (s == "pnlplnrstklist.tcofal") return PNLPLNRSTKLIST_TCOFAL;
	else if (s == "pnlplnrstklist.tcocal") return PNLPLNRSTKLIST_TCOCAL;
	else if (s == "pnlplnrstkhk1nlevel.tcoref") return PNLPLNRSTKHK1NLEVEL_TCOREF;
	else if (s == "pnlplnrstkhk1nlayer.tcoref") return PNLPLNRSTKHK1NLAYER_TCOREF;
	else if (s == "pnlplnrstkmnstructure.tcomref") return PNLPLNRSTKMNSTRUCTURE_TCOMREF;
	else if (s == "pnlplnrstkmnstructure.tcofrl") return PNLPLNRSTKMNSTRUCTURE_TCOFRL;
	else if (s == "pnlplnrstkmnstructure.tcotol") return PNLPLNRSTKMNSTRUCTURE_TCOTOL;
	else if (s == "pnlplnrlyrlist.tcosrf") return PNLPLNRLYRLIST_TCOSRF;
	else if (s == "pnlplnrlyrlist.tcotyp") return PNLPLNRLYRLIST_TCOTYP;
	else if (s == "pnlplnrlyrlist.tcohkt") return PNLPLNRLYRLIST_TCOHKT;
	else if (s == "pnlplnrlyrlist.tcohku") return PNLPLNRLYRLIST_TCOHKU;
	else if (s == "pnlplnrlyrlist.tcomat") return PNLPLNRLYRLIST_TCOMAT;
	else if (s == "pnlplnrlyrlist.tcotty") return PNLPLNRLYRLIST_TCOTTY;
	else if (s == "pnlplnrlyr1nblock.tcoref") return PNLPLNRLYR1NBLOCK_TCOREF;
	else if (s == "pnlplnrlyr1nreticle.tcoref") return PNLPLNRLYR1NRETICLE_TCOREF;
	else if (s == "pnlplnrlyrmnstructure.tcomref") return PNLPLNRLYRMNSTRUCTURE_TCOMREF;
	else if (s == "pnlplnrclclist.tcotit") return PNLPLNRCLCLIST_TCOTIT;
	else if (s == "pnlplnrclclist.tcoprj") return PNLPLNRCLCLIST_TCOPRJ;
	else if (s == "pnlplnrclclist.tcodim") return PNLPLNRCLCLIST_TCODIM;
	else if (s == "pnlplnrclclist.tcotpl") return PNLPLNRCLCLIST_TCOTPL;
	else if (s == "pnlplnrclclist.tcosup") return PNLPLNRCLCLIST_TCOSUP;
	else if (s == "pnlplnrclclist.tcodsn") return PNLPLNRCLCLIST_TCODSN;
	else if (s == "pnlplnrclcaenv.tcokey") return PNLPLNRCLCAENV_TCOKEY;
	else if (s == "pnlplnrclcaenv.tcoval") return PNLPLNRCLCAENV_TCOVAL;
	else if (s == "pnlplnrclcapar.tcocat") return PNLPLNRCLCAPAR_TCOCAT;
	else if (s == "pnlplnrclcapar.tcoprp") return PNLPLNRCLCAPAR_TCOPRP;
	else if (s == "pnlplnrclcapar.tcoval") return PNLPLNRCLCAPAR_TCOVAL;
	else if (s == "pnlplnrclccal1ncalcitem.tcoref") return PNLPLNRCLCCAL1NCALCITEM_TCOREF;
	else if (s == "pnlplnrclc1nmaterial.tcoref") return PNLPLNRCLC1NMATERIAL_TCOREF;
	else if (s == "pnlplnrclcsup1ncalc.tcoref") return PNLPLNRCLCSUP1NCALC_TCOREF;
	else if (s == "pnlplnrclcref1nfile.tcoref") return PNLPLNRCLCREF1NFILE_TCOREF;
	else if (s == "pnlplnrclcmnfile.tcomref") return PNLPLNRCLCMNFILE_TCOMREF;
	else if (s == "pnlplnrclcmnfile.tcocli") return PNLPLNRCLCMNFILE_TCOCLI;
	else if (s == "pnlplnrclcmnfile.tcoio") return PNLPLNRCLCMNFILE_TCOIO;
	else if (s == "pnlplnrclcmndomain.tcomref") return PNLPLNRCLCMNDOMAIN_TCOMREF;
	else if (s == "pnlplnrclcmndomain.tcoprp") return PNLPLNRCLCMNDOMAIN_TCOPRP;
	else if (s == "pnlplnrclilist.tcotit") return PNLPLNRCLILIST_TCOTIT;
	else if (s == "pnlplnrclilist.tcocal") return PNLPLNRCLILIST_TCOCAL;
	else if (s == "pnlplnrclilist.tcodsn") return PNLPLNRCLILIST_TCODSN;
	else if (s == "pnlplnrcliaamcalcenv.tcokey") return PNLPLNRCLIAAMCALCENV_TCOKEY;
	else if (s == "pnlplnrcliaamcalcenv.tcoval") return PNLPLNRCLIAAMCALCENV_TCOVAL;
	else if (s == "pnlplnrcliaamcalcpar.tcocat") return PNLPLNRCLIAAMCALCPAR_TCOCAT;
	else if (s == "pnlplnrcliaamcalcpar.tcoprp") return PNLPLNRCLIAAMCALCPAR_TCOPRP;
	else if (s == "pnlplnrcliaamcalcpar.tcoval") return PNLPLNRCLIAAMCALCPAR_TCOVAL;
	else if (s == "pnlplnrcliref1nfile.tcoref") return PNLPLNRCLIREF1NFILE_TCOREF;
	else if (s == "pnlplnrtpolist.tcotit") return PNLPLNRTPOLIST_TCOTIT;
	else if (s == "pnlplnrtpolist.tcotyp") return PNLPLNRTPOLIST_TCOTYP;
	else if (s == "pnlplnrtpolist.tcomaj") return PNLPLNRTPOLIST_TCOMAJ;
	else if (s == "pnlplnrtpolist.tcosub") return PNLPLNRTPOLIST_TCOSUB;
	else if (s == "pnlplnrtpolist.tcoste") return PNLPLNRTPOLIST_TCOSTE;
	else if (s == "pnlplnrtpolist.tcofli") return PNLPLNRTPOLIST_TCOFLI;
	else if (s == "pnlplnrtpo1narray.tcoref") return PNLPLNRTPO1NARRAY_TCOREF;
	else if (s == "pnlplnrtpohk1nreticle.tcoref") return PNLPLNRTPOHK1NRETICLE_TCOREF;
	else if (s == "pnlplnrtpomnproject.tcomref") return PNLPLNRTPOMNPROJECT_TCOMREF;
	else if (s == "pnlplnrarrlist.tcosrf") return PNLPLNRARRLIST_TCOSRF;
	else if (s == "pnlplnrarrlist.tcotpo") return PNLPLNRARRLIST_TCOTPO;
	else if (s == "pnlplnrarrlist.tcodsn") return PNLPLNRARRLIST_TCODSN;
	else if (s == "pnlplnrarrlist.tcoi") return PNLPLNRARRLIST_TCOI;
	else if (s == "pnlplnrarrlist.tcoj") return PNLPLNRARRLIST_TCOJ;
	else if (s == "pnlplnrarrlist.tcok") return PNLPLNRARRLIST_TCOK;
	else if (s == "pnlplnrarrlist.tcol") return PNLPLNRARRLIST_TCOL;
	else if (s == "pnlplnrarrlist.tcom") return PNLPLNRARRLIST_TCOM;
	else if (s == "pnlplnrarrlist.tcon") return PNLPLNRARRLIST_TCON;
	else if (s == "pnlplnrarrkenvkey.tcofix") return PNLPLNRARRKENVKEY_TCOFIX;
	else if (s == "pnlplnrarrkenvkey.tcosrf") return PNLPLNRARRKENVKEY_TCOSRF;
	else if (s == "pnlplnrarrkenvkey.tcoavl") return PNLPLNRARRKENVKEY_TCOAVL;
	else if (s == "pnlplnrarrkenvkey.tcoimp") return PNLPLNRARRKENVKEY_TCOIMP;
	else if (s == "pnlplnrarrkenvkey.tcotit") return PNLPLNRARRKENVKEY_TCOTIT;
	else if (s == "pnlplnrarrkenvkey.tcocmt") return PNLPLNRARRKENVKEY_TCOCMT;
	else if (s == "pnlplnrarraenv.tcokey") return PNLPLNRARRAENV_TCOKEY;
	else if (s == "pnlplnrarraenv.tcoval") return PNLPLNRARRAENV_TCOVAL;
	else if (s == "pnlplnrarr1narrayitem.tcoref") return PNLPLNRARR1NARRAYITEM_TCOREF;
	else if (s == "pnlplnrarrhk1nreticle.tcoref") return PNLPLNRARRHK1NRETICLE_TCOREF;
	else if (s == "pnlplnrarilist.tcoi") return PNLPLNRARILIST_TCOI;
	else if (s == "pnlplnrarilist.tcoj") return PNLPLNRARILIST_TCOJ;
	else if (s == "pnlplnrarilist.tcok") return PNLPLNRARILIST_TCOK;
	else if (s == "pnlplnrarilist.tcol") return PNLPLNRARILIST_TCOL;
	else if (s == "pnlplnrarilist.tcom") return PNLPLNRARILIST_TCOM;
	else if (s == "pnlplnrarilist.tcon") return PNLPLNRARILIST_TCON;
	else if (s == "pnlplnrarilist.tcoarr") return PNLPLNRARILIST_TCOARR;
	else if (s == "pnlplnrarilist.tcodsn") return PNLPLNRARILIST_TCODSN;
	else if (s == "pnlplnrarilist.tcodx") return PNLPLNRARILIST_TCODX;
	else if (s == "pnlplnrarilist.tcody") return PNLPLNRARILIST_TCODY;
	else if (s == "pnlplnrariamarrayenv.tcokey") return PNLPLNRARIAMARRAYENV_TCOKEY;
	else if (s == "pnlplnrariamarrayenv.tcoval") return PNLPLNRARIAMARRAYENV_TCOVAL;
	else if (s == "pnlplnrrtclist.tcosrf") return PNLPLNRRTCLIST_TCOSRF;
	else if (s == "pnlplnrrtclist.tcohkt") return PNLPLNRRTCLIST_TCOHKT;
	else if (s == "pnlplnrrtclist.tcohku") return PNLPLNRRTCLIST_TCOHKU;
	else if (s == "pnlplnrrtclist.tcodsn") return PNLPLNRRTCLIST_TCODSN;
	else if (s == "pnlplnrrtclist.tcolyr") return PNLPLNRRTCLIST_TCOLYR;

	return(0);
};

string VecPlnrVControl::getSref(
			const uint ix
		) {
	if (ix == PNLPLNRUSGLIST_TCOSRF) return("PnlPlnrUsgList.TcoSrf");
	else if (ix == PNLPLNRUSGAACCESS_TCOCRD) return("PnlPlnrUsgAAccess.TcoCrd");
	else if (ix == PNLPLNRUSGAACCESS_TCOUAC) return("PnlPlnrUsgAAccess.TcoUac");
	else if (ix == PNLPLNRUSGMNUSER_TCOMREF) return("PnlPlnrUsgMNUser.TcoMref");
	else if (ix == PNLPLNRUSGMNUSER_TCOULV) return("PnlPlnrUsgMNUser.TcoUlv");
	else if (ix == PNLPLNRUSRLIST_TCOPRS) return("PnlPlnrUsrList.TcoPrs");
	else if (ix == PNLPLNRUSRLIST_TCOSRF) return("PnlPlnrUsrList.TcoSrf");
	else if (ix == PNLPLNRUSRLIST_TCOUSG) return("PnlPlnrUsrList.TcoUsg");
	else if (ix == PNLPLNRUSRLIST_TCOSTE) return("PnlPlnrUsrList.TcoSte");
	else if (ix == PNLPLNRUSRLIST_TCOLCL) return("PnlPlnrUsrList.TcoLcl");
	else if (ix == PNLPLNRUSRLIST_TCOULV) return("PnlPlnrUsrList.TcoUlv");
	else if (ix == PNLPLNRUSRAACCESS_TCOCRD) return("PnlPlnrUsrAAccess.TcoCrd");
	else if (ix == PNLPLNRUSRAACCESS_TCOUAC) return("PnlPlnrUsrAAccess.TcoUac");
	else if (ix == PNLPLNRUSR1NSESSION_TCOREF) return("PnlPlnrUsr1NSession.TcoRef");
	else if (ix == PNLPLNRUSRMNUSERGROUP_TCOMREF) return("PnlPlnrUsrMNUsergroup.TcoMref");
	else if (ix == PNLPLNRUSRMNUSERGROUP_TCOULV) return("PnlPlnrUsrMNUsergroup.TcoUlv");
	else if (ix == PNLPLNRPRSLIST_TCOTIT) return("PnlPlnrPrsList.TcoTit");
	else if (ix == PNLPLNRPRSLIST_TCOFNM) return("PnlPlnrPrsList.TcoFnm");
	else if (ix == PNLPLNRPRSLIST_TCOLNM) return("PnlPlnrPrsList.TcoLnm");
	else if (ix == PNLPLNRPRSLIST_TCOGRP) return("PnlPlnrPrsList.TcoGrp");
	else if (ix == PNLPLNRPRSLIST_TCOOWN) return("PnlPlnrPrsList.TcoOwn");
	else if (ix == PNLPLNRPRSLIST_TCOSEX) return("PnlPlnrPrsList.TcoSex");
	else if (ix == PNLPLNRPRSLIST_TCOTEL) return("PnlPlnrPrsList.TcoTel");
	else if (ix == PNLPLNRPRSLIST_TCOEML) return("PnlPlnrPrsList.TcoEml");
	else if (ix == PNLPLNRPRSADETAIL_TCOTYP) return("PnlPlnrPrsADetail.TcoTyp");
	else if (ix == PNLPLNRPRSADETAIL_TCOVAL) return("PnlPlnrPrsADetail.TcoVal");
	else if (ix == PNLPLNRFILLIST_TCOFNM) return("PnlPlnrFilList.TcoFnm");
	else if (ix == PNLPLNRFILLIST_TCORET) return("PnlPlnrFilList.TcoRet");
	else if (ix == PNLPLNRFILLIST_TCOREU) return("PnlPlnrFilList.TcoReu");
	else if (ix == PNLPLNRFILLIST_TCOCNT) return("PnlPlnrFilList.TcoCnt");
	else if (ix == PNLPLNRFILLIST_TCOMIM) return("PnlPlnrFilList.TcoMim");
	else if (ix == PNLPLNRFILLIST_TCOSIZ) return("PnlPlnrFilList.TcoSiz");
	else if (ix == PNLPLNRFILMNCALC_TCOMREF) return("PnlPlnrFilMNCalc.TcoMref");
	else if (ix == PNLPLNRFILMNCALC_TCOCLI) return("PnlPlnrFilMNCalc.TcoCli");
	else if (ix == PNLPLNRFILMNCALC_TCOIO) return("PnlPlnrFilMNCalc.TcoIo");
	else if (ix == PNLPLNRDTPLIST_TCOSRF) return("PnlPlnrDtpList.TcoSrf");
	else if (ix == PNLPLNRDTPLIST_TCOSUP) return("PnlPlnrDtpList.TcoSup");
	else if (ix == PNLPLNRDTPKPARKEY_TCOSRF) return("PnlPlnrDtpKParKey.TcoSrf");
	else if (ix == PNLPLNRDTPKPARKEY_TCOTIT) return("PnlPlnrDtpKParKey.TcoTit");
	else if (ix == PNLPLNRDTPKPARKEY_TCOCMT) return("PnlPlnrDtpKParKey.TcoCmt");
	else if (ix == PNLPLNRDTPAPAR_TCOKEY) return("PnlPlnrDtpAPar.TcoKey");
	else if (ix == PNLPLNRDTPAPAR_TCOFIL) return("PnlPlnrDtpAPar.TcoFil");
	else if (ix == PNLPLNRDTPAPAR_TCOVAL) return("PnlPlnrDtpAPar.TcoVal");
	else if (ix == PNLPLNRDTPSUP1NDEVICE_TCOREF) return("PnlPlnrDtpSup1NDevice.TcoRef");
	else if (ix == PNLPLNRDTPHK1NSTRUCTURE_TCOREF) return("PnlPlnrDtpHk1NStructure.TcoRef");
	else if (ix == PNLPLNRDTPTPL1NDEVICE_TCOREF) return("PnlPlnrDtpTpl1NDevice.TcoRef");
	else if (ix == PNLPLNRCTPLIST_TCOTIT) return("PnlPlnrCtpList.TcoTit");
	else if (ix == PNLPLNRCTPLIST_TCODIM) return("PnlPlnrCtpList.TcoDim");
	else if (ix == PNLPLNRCTPLIST_TCOSUP) return("PnlPlnrCtpList.TcoSup");
	else if (ix == PNLPLNRCTPKENVKEY_TCOSRF) return("PnlPlnrCtpKEnvKey.TcoSrf");
	else if (ix == PNLPLNRCTPKENVKEY_TCOTIT) return("PnlPlnrCtpKEnvKey.TcoTit");
	else if (ix == PNLPLNRCTPKENVKEY_TCOCMT) return("PnlPlnrCtpKEnvKey.TcoCmt");
	else if (ix == PNLPLNRCTPKPARCAT_TCOSRF) return("PnlPlnrCtpKParCat.TcoSrf");
	else if (ix == PNLPLNRCTPKPARCAT_TCOTIT) return("PnlPlnrCtpKParCat.TcoTit");
	else if (ix == PNLPLNRCTPKPARCAT_TCOCMT) return("PnlPlnrCtpKParCat.TcoCmt");
	else if (ix == PNLPLNRCTPKPARPROP_TCOSRF) return("PnlPlnrCtpKParProp.TcoSrf");
	else if (ix == PNLPLNRCTPKPARPROP_TCOAVL) return("PnlPlnrCtpKParProp.TcoAvl");
	else if (ix == PNLPLNRCTPKPARPROP_TCOTIT) return("PnlPlnrCtpKParProp.TcoTit");
	else if (ix == PNLPLNRCTPKPARPROP_TCOCMT) return("PnlPlnrCtpKParProp.TcoCmt");
	else if (ix == PNLPLNRCTPKCALCDOMPRP_TCOFIX) return("PnlPlnrCtpKCalcdomprp.TcoFix");
	else if (ix == PNLPLNRCTPKCALCDOMPRP_TCOSRF) return("PnlPlnrCtpKCalcdomprp.TcoSrf");
	else if (ix == PNLPLNRCTPKCALCDOMPRP_TCOAVL) return("PnlPlnrCtpKCalcdomprp.TcoAvl");
	else if (ix == PNLPLNRCTPKCALCDOMPRP_TCOIMP) return("PnlPlnrCtpKCalcdomprp.TcoImp");
	else if (ix == PNLPLNRCTPKCALCDOMPRP_TCOTIT) return("PnlPlnrCtpKCalcdomprp.TcoTit");
	else if (ix == PNLPLNRCTPKCALCDOMPRP_TCOCMT) return("PnlPlnrCtpKCalcdomprp.TcoCmt");
	else if (ix == PNLPLNRCTPKCALCVAR_TCOFIX) return("PnlPlnrCtpKCalcvar.TcoFix");
	else if (ix == PNLPLNRCTPKCALCVAR_TCOSRF) return("PnlPlnrCtpKCalcvar.TcoSrf");
	else if (ix == PNLPLNRCTPKCALCVAR_TCOAVL) return("PnlPlnrCtpKCalcvar.TcoAvl");
	else if (ix == PNLPLNRCTPKCALCVAR_TCOIMP) return("PnlPlnrCtpKCalcvar.TcoImp");
	else if (ix == PNLPLNRCTPKCALCVAR_TCOTIT) return("PnlPlnrCtpKCalcvar.TcoTit");
	else if (ix == PNLPLNRCTPKCALCVAR_TCOCMT) return("PnlPlnrCtpKCalcvar.TcoCmt");
	else if (ix == PNLPLNRCTPAENV_TCOKEY) return("PnlPlnrCtpAEnv.TcoKey");
	else if (ix == PNLPLNRCTPAENV_TCOVAL) return("PnlPlnrCtpAEnv.TcoVal");
	else if (ix == PNLPLNRCTPAPAR_TCOCAT) return("PnlPlnrCtpAPar.TcoCat");
	else if (ix == PNLPLNRCTPAPAR_TCOPRP) return("PnlPlnrCtpAPar.TcoPrp");
	else if (ix == PNLPLNRCTPAPAR_TCOVAL) return("PnlPlnrCtpAPar.TcoVal");
	else if (ix == PNLPLNRCTPSUP1NCALC_TCOREF) return("PnlPlnrCtpSup1NCalc.TcoRef");
	else if (ix == PNLPLNRCTPREF1NFILE_TCOREF) return("PnlPlnrCtpRef1NFile.TcoRef");
	else if (ix == PNLPLNRCTPTPL1NCALC_TCOREF) return("PnlPlnrCtpTpl1NCalc.TcoRef");
	else if (ix == PNLPLNRMATLIST_TCOSRF) return("PnlPlnrMatList.TcoSrf");
	else if (ix == PNLPLNRMATLIST_TCOTIT) return("PnlPlnrMatList.TcoTit");
	else if (ix == PNLPLNRMATLIST_TCOTYP) return("PnlPlnrMatList.TcoTyp");
	else if (ix == PNLPLNRMATLIST_TCOCAL) return("PnlPlnrMatList.TcoCal");
	else if (ix == PNLPLNRMATLIST_TCOSUP) return("PnlPlnrMatList.TcoSup");
	else if (ix == PNLPLNRMATAPAR_TCODSN) return("PnlPlnrMatAPar.TcoDsn");
	else if (ix == PNLPLNRMATAPAR_TCOCAT) return("PnlPlnrMatAPar.TcoCat");
	else if (ix == PNLPLNRMATAPAR_TCOPRP) return("PnlPlnrMatAPar.TcoPrp");
	else if (ix == PNLPLNRMATAPAR_TCOFIL) return("PnlPlnrMatAPar.TcoFil");
	else if (ix == PNLPLNRMATAPAR_TCOVAL) return("PnlPlnrMatAPar.TcoVal");
	else if (ix == PNLPLNRMATAPAR_TCOCMT) return("PnlPlnrMatAPar.TcoCmt");
	else if (ix == PNLPLNRMAT1NLAYER_TCOREF) return("PnlPlnrMat1NLayer.TcoRef");
	else if (ix == PNLPLNRMATMOD1NMATERIAL_TCOREF) return("PnlPlnrMatMod1NMaterial.TcoRef");
	else if (ix == PNLPLNRMATREF1NFILE_TCOREF) return("PnlPlnrMatRef1NFile.TcoRef");
	else if (ix == PNLPLNRPRJLIST_TCOTIT) return("PnlPlnrPrjList.TcoTit");
	else if (ix == PNLPLNRPRJLIST_TCOSTE) return("PnlPlnrPrjList.TcoSte");
	else if (ix == PNLPLNRPRJ1NCALC_TCOREF) return("PnlPlnrPrj1NCalc.TcoRef");
	else if (ix == PNLPLNRPRJ1NDESIGN_TCOREF) return("PnlPlnrPrj1NDesign.TcoRef");
	else if (ix == PNLPLNRPRJMNTAPEOUT_TCOMREF) return("PnlPlnrPrjMNTapeout.TcoMref");
	else if (ix == PNLPLNRDSNLIST_TCOTIT) return("PnlPlnrDsnList.TcoTit");
	else if (ix == PNLPLNRDSNLIST_TCOTYP) return("PnlPlnrDsnList.TcoTyp");
	else if (ix == PNLPLNRDSNLIST_TCODIM) return("PnlPlnrDsnList.TcoDim");
	else if (ix == PNLPLNRDSNLIST_TCORET) return("PnlPlnrDsnList.TcoRet");
	else if (ix == PNLPLNRDSNLIST_TCOREU) return("PnlPlnrDsnList.TcoReu");
	else if (ix == PNLPLNRDSNLIST_TCOPRJ) return("PnlPlnrDsnList.TcoPrj");
	else if (ix == PNLPLNRDSNLIST_TCOMTY) return("PnlPlnrDsnList.TcoMty");
	else if (ix == PNLPLNRDSNLIST_TCOMOD) return("PnlPlnrDsnList.TcoMod");
	else if (ix == PNLPLNRDSNLIST_TCODRV) return("PnlPlnrDsnList.TcoDrv");
	else if (ix == PNLPLNRDSNLIST_TCOMAJ) return("PnlPlnrDsnList.TcoMaj");
	else if (ix == PNLPLNRDSNLIST_TCOSUB) return("PnlPlnrDsnList.TcoSub");
	else if (ix == PNLPLNRDSNMOD1NDESIGN_TCOREF) return("PnlPlnrDsnMod1NDesign.TcoRef");
	else if (ix == PNLPLNRDSNDRV1NDESIGN_TCOREF) return("PnlPlnrDsnDrv1NDesign.TcoRef");
	else if (ix == PNLPLNRDSNDSN1NDEVICE_TCOREF) return("PnlPlnrDsnDsn1NDevice.TcoRef");
	else if (ix == PNLPLNRDSNDSN1NSTACK_TCOREF) return("PnlPlnrDsnDsn1NStack.TcoRef");
	else if (ix == PNLPLNRDSNDSN1NDOMAINGD_TCOREF) return("PnlPlnrDsnDsn1NDomaingd.TcoRef");
	else if (ix == PNLPLNRDSNDSN1NDOMAIN_TCOREF) return("PnlPlnrDsnDsn1NDomain.TcoRef");
	else if (ix == PNLPLNRDSN1NBLOCK_TCOREF) return("PnlPlnrDsn1NBlock.TcoRef");
	else if (ix == PNLPLNRDSN1NRETICLE_TCOREF) return("PnlPlnrDsn1NReticle.TcoRef");
	else if (ix == PNLPLNRDSNHK1NLEVEL_TCOREF) return("PnlPlnrDsnHk1NLevel.TcoRef");
	else if (ix == PNLPLNRDSNHK1NVERTEX_TCOREF) return("PnlPlnrDsnHk1NVertex.TcoRef");
	else if (ix == PNLPLNRDSNHK1NLINEGUIDE_TCOREF) return("PnlPlnrDsnHk1NLineguide.TcoRef");
	else if (ix == PNLPLNRDSNHK1NARCGUIDE_TCOREF) return("PnlPlnrDsnHk1NArcguide.TcoRef");
	else if (ix == PNLPLNRDSNHK1NLAYER_TCOREF) return("PnlPlnrDsnHk1NLayer.TcoRef");
	else if (ix == PNLPLNRDSNHK1NSTRUCTURE_TCOREF) return("PnlPlnrDsnHk1NStructure.TcoRef");
	else if (ix == PNLPLNRDOMLIST_TCOSRF) return("PnlPlnrDomList.TcoSrf");
	else if (ix == PNLPLNRDOMLIST_TCOTYP) return("PnlPlnrDomList.TcoTyp");
	else if (ix == PNLPLNRDOMLIST_TCODSN) return("PnlPlnrDomList.TcoDsn");
	else if (ix == PNLPLNRDOMMNCALC_TCOMREF) return("PnlPlnrDomMNCalc.TcoMref");
	else if (ix == PNLPLNRDOMMNCALC_TCOPRP) return("PnlPlnrDomMNCalc.TcoPrp");
	else if (ix == PNLPLNRDGDLIST_TCOSRF) return("PnlPlnrDgdList.TcoSrf");
	else if (ix == PNLPLNRDGDLIST_TCOTYP) return("PnlPlnrDgdList.TcoTyp");
	else if (ix == PNLPLNRDGDLIST_TCODSN) return("PnlPlnrDgdList.TcoDsn");
	else if (ix == PNLPLNRDVCLIST_TCOSRF) return("PnlPlnrDvcList.TcoSrf");
	else if (ix == PNLPLNRDVCLIST_TCODSN) return("PnlPlnrDvcList.TcoDsn");
	else if (ix == PNLPLNRDVCLIST_TCOSUP) return("PnlPlnrDvcList.TcoSup");
	else if (ix == PNLPLNRDVCLIST_TCOTPL) return("PnlPlnrDvcList.TcoTpl");
	else if (ix == PNLPLNRDVCLIST_TCOMTY) return("PnlPlnrDvcList.TcoMty");
	else if (ix == PNLPLNRDVCLIST_TCOATY) return("PnlPlnrDvcList.TcoAty");
	else if (ix == PNLPLNRDVCAPAR_TCODSN) return("PnlPlnrDvcAPar.TcoDsn");
	else if (ix == PNLPLNRDVCAPAR_TCOKEY) return("PnlPlnrDvcAPar.TcoKey");
	else if (ix == PNLPLNRDVCAPAR_TCOFIL) return("PnlPlnrDvcAPar.TcoFil");
	else if (ix == PNLPLNRDVCAPAR_TCOVAL) return("PnlPlnrDvcAPar.TcoVal");
	else if (ix == PNLPLNRDVCSUP1NDEVICE_TCOREF) return("PnlPlnrDvcSup1NDevice.TcoRef");
	else if (ix == PNLPLNRDVCHK1NSTRUCTURE_TCOREF) return("PnlPlnrDvcHk1NStructure.TcoRef");
	else if (ix == PNLPLNRDVCHK1NVERTEX_TCOREF) return("PnlPlnrDvcHk1NVertex.TcoRef");
	else if (ix == PNLPLNRDVCHK1NLINEGUIDE_TCOREF) return("PnlPlnrDvcHk1NLineguide.TcoRef");
	else if (ix == PNLPLNRDVCHK1NARCGUIDE_TCOREF) return("PnlPlnrDvcHk1NArcguide.TcoRef");
	else if (ix == PNLPLNRSRULIST_TCOSRF) return("PnlPlnrSruList.TcoSrf");
	else if (ix == PNLPLNRSRULIST_TCOHKT) return("PnlPlnrSruList.TcoHkt");
	else if (ix == PNLPLNRSRULIST_TCOHKU) return("PnlPlnrSruList.TcoHku");
	else if (ix == PNLPLNRSRU1NBLOCK_TCOREF) return("PnlPlnrSru1NBlock.TcoRef");
	else if (ix == PNLPLNRSRUSRU1NFACE_TCOREF) return("PnlPlnrSruSru1NFace.TcoRef");
	else if (ix == PNLPLNRSRUMNLAYER_TCOMREF) return("PnlPlnrSruMNLayer.TcoMref");
	else if (ix == PNLPLNRSRUMNSTACK_TCOMREF) return("PnlPlnrSruMNStack.TcoMref");
	else if (ix == PNLPLNRSRUMNSTACK_TCOFRL) return("PnlPlnrSruMNStack.TcoFrl");
	else if (ix == PNLPLNRSRUMNSTACK_TCOTOL) return("PnlPlnrSruMNStack.TcoTol");
	else if (ix == PNLPLNRSTKLIST_TCOSRF) return("PnlPlnrStkList.TcoSrf");
	else if (ix == PNLPLNRSTKLIST_TCOTYP) return("PnlPlnrStkList.TcoTyp");
	else if (ix == PNLPLNRSTKLIST_TCODSN) return("PnlPlnrStkList.TcoDsn");
	else if (ix == PNLPLNRSTKLIST_TCOMTY) return("PnlPlnrStkList.TcoMty");
	else if (ix == PNLPLNRSTKLIST_TCOFAL) return("PnlPlnrStkList.TcoFal");
	else if (ix == PNLPLNRSTKLIST_TCOCAL) return("PnlPlnrStkList.TcoCal");
	else if (ix == PNLPLNRSTKHK1NLEVEL_TCOREF) return("PnlPlnrStkHk1NLevel.TcoRef");
	else if (ix == PNLPLNRSTKHK1NLAYER_TCOREF) return("PnlPlnrStkHk1NLayer.TcoRef");
	else if (ix == PNLPLNRSTKMNSTRUCTURE_TCOMREF) return("PnlPlnrStkMNStructure.TcoMref");
	else if (ix == PNLPLNRSTKMNSTRUCTURE_TCOFRL) return("PnlPlnrStkMNStructure.TcoFrl");
	else if (ix == PNLPLNRSTKMNSTRUCTURE_TCOTOL) return("PnlPlnrStkMNStructure.TcoTol");
	else if (ix == PNLPLNRLYRLIST_TCOSRF) return("PnlPlnrLyrList.TcoSrf");
	else if (ix == PNLPLNRLYRLIST_TCOTYP) return("PnlPlnrLyrList.TcoTyp");
	else if (ix == PNLPLNRLYRLIST_TCOHKT) return("PnlPlnrLyrList.TcoHkt");
	else if (ix == PNLPLNRLYRLIST_TCOHKU) return("PnlPlnrLyrList.TcoHku");
	else if (ix == PNLPLNRLYRLIST_TCOMAT) return("PnlPlnrLyrList.TcoMat");
	else if (ix == PNLPLNRLYRLIST_TCOTTY) return("PnlPlnrLyrList.TcoTty");
	else if (ix == PNLPLNRLYR1NBLOCK_TCOREF) return("PnlPlnrLyr1NBlock.TcoRef");
	else if (ix == PNLPLNRLYR1NRETICLE_TCOREF) return("PnlPlnrLyr1NReticle.TcoRef");
	else if (ix == PNLPLNRLYRMNSTRUCTURE_TCOMREF) return("PnlPlnrLyrMNStructure.TcoMref");
	else if (ix == PNLPLNRCLCLIST_TCOTIT) return("PnlPlnrClcList.TcoTit");
	else if (ix == PNLPLNRCLCLIST_TCOPRJ) return("PnlPlnrClcList.TcoPrj");
	else if (ix == PNLPLNRCLCLIST_TCODIM) return("PnlPlnrClcList.TcoDim");
	else if (ix == PNLPLNRCLCLIST_TCOTPL) return("PnlPlnrClcList.TcoTpl");
	else if (ix == PNLPLNRCLCLIST_TCOSUP) return("PnlPlnrClcList.TcoSup");
	else if (ix == PNLPLNRCLCLIST_TCODSN) return("PnlPlnrClcList.TcoDsn");
	else if (ix == PNLPLNRCLCAENV_TCOKEY) return("PnlPlnrClcAEnv.TcoKey");
	else if (ix == PNLPLNRCLCAENV_TCOVAL) return("PnlPlnrClcAEnv.TcoVal");
	else if (ix == PNLPLNRCLCAPAR_TCOCAT) return("PnlPlnrClcAPar.TcoCat");
	else if (ix == PNLPLNRCLCAPAR_TCOPRP) return("PnlPlnrClcAPar.TcoPrp");
	else if (ix == PNLPLNRCLCAPAR_TCOVAL) return("PnlPlnrClcAPar.TcoVal");
	else if (ix == PNLPLNRCLCCAL1NCALCITEM_TCOREF) return("PnlPlnrClcCal1NCalcitem.TcoRef");
	else if (ix == PNLPLNRCLC1NMATERIAL_TCOREF) return("PnlPlnrClc1NMaterial.TcoRef");
	else if (ix == PNLPLNRCLCSUP1NCALC_TCOREF) return("PnlPlnrClcSup1NCalc.TcoRef");
	else if (ix == PNLPLNRCLCREF1NFILE_TCOREF) return("PnlPlnrClcRef1NFile.TcoRef");
	else if (ix == PNLPLNRCLCMNFILE_TCOMREF) return("PnlPlnrClcMNFile.TcoMref");
	else if (ix == PNLPLNRCLCMNFILE_TCOCLI) return("PnlPlnrClcMNFile.TcoCli");
	else if (ix == PNLPLNRCLCMNFILE_TCOIO) return("PnlPlnrClcMNFile.TcoIo");
	else if (ix == PNLPLNRCLCMNDOMAIN_TCOMREF) return("PnlPlnrClcMNDomain.TcoMref");
	else if (ix == PNLPLNRCLCMNDOMAIN_TCOPRP) return("PnlPlnrClcMNDomain.TcoPrp");
	else if (ix == PNLPLNRCLILIST_TCOTIT) return("PnlPlnrCliList.TcoTit");
	else if (ix == PNLPLNRCLILIST_TCOCAL) return("PnlPlnrCliList.TcoCal");
	else if (ix == PNLPLNRCLILIST_TCODSN) return("PnlPlnrCliList.TcoDsn");
	else if (ix == PNLPLNRCLIAAMCALCENV_TCOKEY) return("PnlPlnrCliAAMCalcEnv.TcoKey");
	else if (ix == PNLPLNRCLIAAMCALCENV_TCOVAL) return("PnlPlnrCliAAMCalcEnv.TcoVal");
	else if (ix == PNLPLNRCLIAAMCALCPAR_TCOCAT) return("PnlPlnrCliAAMCalcPar.TcoCat");
	else if (ix == PNLPLNRCLIAAMCALCPAR_TCOPRP) return("PnlPlnrCliAAMCalcPar.TcoPrp");
	else if (ix == PNLPLNRCLIAAMCALCPAR_TCOVAL) return("PnlPlnrCliAAMCalcPar.TcoVal");
	else if (ix == PNLPLNRCLIREF1NFILE_TCOREF) return("PnlPlnrCliRef1NFile.TcoRef");
	else if (ix == PNLPLNRTPOLIST_TCOTIT) return("PnlPlnrTpoList.TcoTit");
	else if (ix == PNLPLNRTPOLIST_TCOTYP) return("PnlPlnrTpoList.TcoTyp");
	else if (ix == PNLPLNRTPOLIST_TCOMAJ) return("PnlPlnrTpoList.TcoMaj");
	else if (ix == PNLPLNRTPOLIST_TCOSUB) return("PnlPlnrTpoList.TcoSub");
	else if (ix == PNLPLNRTPOLIST_TCOSTE) return("PnlPlnrTpoList.TcoSte");
	else if (ix == PNLPLNRTPOLIST_TCOFLI) return("PnlPlnrTpoList.TcoFli");
	else if (ix == PNLPLNRTPO1NARRAY_TCOREF) return("PnlPlnrTpo1NArray.TcoRef");
	else if (ix == PNLPLNRTPOHK1NRETICLE_TCOREF) return("PnlPlnrTpoHk1NReticle.TcoRef");
	else if (ix == PNLPLNRTPOMNPROJECT_TCOMREF) return("PnlPlnrTpoMNProject.TcoMref");
	else if (ix == PNLPLNRARRLIST_TCOSRF) return("PnlPlnrArrList.TcoSrf");
	else if (ix == PNLPLNRARRLIST_TCOTPO) return("PnlPlnrArrList.TcoTpo");
	else if (ix == PNLPLNRARRLIST_TCODSN) return("PnlPlnrArrList.TcoDsn");
	else if (ix == PNLPLNRARRLIST_TCOI) return("PnlPlnrArrList.TcoI");
	else if (ix == PNLPLNRARRLIST_TCOJ) return("PnlPlnrArrList.TcoJ");
	else if (ix == PNLPLNRARRLIST_TCOK) return("PnlPlnrArrList.TcoK");
	else if (ix == PNLPLNRARRLIST_TCOL) return("PnlPlnrArrList.TcoL");
	else if (ix == PNLPLNRARRLIST_TCOM) return("PnlPlnrArrList.TcoM");
	else if (ix == PNLPLNRARRLIST_TCON) return("PnlPlnrArrList.TcoN");
	else if (ix == PNLPLNRARRKENVKEY_TCOFIX) return("PnlPlnrArrKEnvKey.TcoFix");
	else if (ix == PNLPLNRARRKENVKEY_TCOSRF) return("PnlPlnrArrKEnvKey.TcoSrf");
	else if (ix == PNLPLNRARRKENVKEY_TCOAVL) return("PnlPlnrArrKEnvKey.TcoAvl");
	else if (ix == PNLPLNRARRKENVKEY_TCOIMP) return("PnlPlnrArrKEnvKey.TcoImp");
	else if (ix == PNLPLNRARRKENVKEY_TCOTIT) return("PnlPlnrArrKEnvKey.TcoTit");
	else if (ix == PNLPLNRARRKENVKEY_TCOCMT) return("PnlPlnrArrKEnvKey.TcoCmt");
	else if (ix == PNLPLNRARRAENV_TCOKEY) return("PnlPlnrArrAEnv.TcoKey");
	else if (ix == PNLPLNRARRAENV_TCOVAL) return("PnlPlnrArrAEnv.TcoVal");
	else if (ix == PNLPLNRARR1NARRAYITEM_TCOREF) return("PnlPlnrArr1NArrayitem.TcoRef");
	else if (ix == PNLPLNRARRHK1NRETICLE_TCOREF) return("PnlPlnrArrHk1NReticle.TcoRef");
	else if (ix == PNLPLNRARILIST_TCOI) return("PnlPlnrAriList.TcoI");
	else if (ix == PNLPLNRARILIST_TCOJ) return("PnlPlnrAriList.TcoJ");
	else if (ix == PNLPLNRARILIST_TCOK) return("PnlPlnrAriList.TcoK");
	else if (ix == PNLPLNRARILIST_TCOL) return("PnlPlnrAriList.TcoL");
	else if (ix == PNLPLNRARILIST_TCOM) return("PnlPlnrAriList.TcoM");
	else if (ix == PNLPLNRARILIST_TCON) return("PnlPlnrAriList.TcoN");
	else if (ix == PNLPLNRARILIST_TCOARR) return("PnlPlnrAriList.TcoArr");
	else if (ix == PNLPLNRARILIST_TCODSN) return("PnlPlnrAriList.TcoDsn");
	else if (ix == PNLPLNRARILIST_TCODX) return("PnlPlnrAriList.TcoDx");
	else if (ix == PNLPLNRARILIST_TCODY) return("PnlPlnrAriList.TcoDy");
	else if (ix == PNLPLNRARIAMARRAYENV_TCOKEY) return("PnlPlnrAriAMArrayEnv.TcoKey");
	else if (ix == PNLPLNRARIAMARRAYENV_TCOVAL) return("PnlPlnrAriAMArrayEnv.TcoVal");
	else if (ix == PNLPLNRRTCLIST_TCOSRF) return("PnlPlnrRtcList.TcoSrf");
	else if (ix == PNLPLNRRTCLIST_TCOHKT) return("PnlPlnrRtcList.TcoHkt");
	else if (ix == PNLPLNRRTCLIST_TCOHKU) return("PnlPlnrRtcList.TcoHku");
	else if (ix == PNLPLNRRTCLIST_TCODSN) return("PnlPlnrRtcList.TcoDsn");
	else if (ix == PNLPLNRRTCLIST_TCOLYR) return("PnlPlnrRtcList.TcoLyr");

	return("");
};

